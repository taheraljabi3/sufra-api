using Sufra.Application.DTOs.Notifications;

namespace Sufra.Application.Interfaces
{
    public interface INotificationService
    {
         // ============================================================
        // โ ุฅูุดุงุก ุฅุดุนุงุฑ/ุฅุดุนุงุฑุงุช
        // ============================================================
        /// <summary>
        /// ุฅูุดุงุก ุฅุดุนุงุฑ ูุงุญุฏ.
        /// </summary>
        Task CreateAsync(NotificationDto dto);

        /// <summary>
        /// ุฅูุดุงุก ุนุฏุฉ ุฅุดุนุงุฑุงุช ุฏูุนุฉ ูุงุญุฏุฉ (Bulk).
        /// </summary>
        Task CreateManyAsync(IEnumerable<NotificationDto> notifications);

        // ============================================================
        // ๐ฌ ุงููุฑุงุกุฉ
        // ============================================================
        /// <summary>
        /// ุฌูุจ ุฌููุน ุฅุดุนุงุฑุงุช ุงููุณุชุฎุฏู (ูุฑุชุจุฉ: ุบูุฑ ุงูููุฑูุก ุฃููุงู ุซู ุงูุฃุญุฏุซ).
        /// </summary>
        Task<IEnumerable<NotificationDto>> GetByUserAsync(int userId, string role);

        /// <summary>
        /// ุฌูุจ ุงูุฅุดุนุงุฑุงุช ุบูุฑ ุงูููุฑูุกุฉ ููุท ูููุณุชุฎุฏู.
        /// </summary>
        Task<IEnumerable<NotificationDto>> GetUnreadAsync(int userId, string role);

        // ============================================================
        // โ ุงูุชุญุฏูุซ / ุงูุญุฐู
        // ============================================================
        /// <summary>
        /// ุชุญุฏูุฏ ุฅุดุนุงุฑ ูููุฑูุก.
        /// </summary>
        Task MarkAsReadAsync(int id);

        /// <summary>
        /// ุญุฐู ุฅุดุนุงุฑ.
        /// </summary>
        Task DeleteAsync(int id);
    }
}
