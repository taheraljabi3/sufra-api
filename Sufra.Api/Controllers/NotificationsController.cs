using Microsoft.AspNetCore.Mvc;
using Sufra.Application.DTOs.Notifications;
using Sufra.Application.Interfaces;

namespace Sufra.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class NotificationsController : ControllerBase
    {
        private readonly INotificationService _notificationService;
        private readonly ILogger<NotificationsController> _logger;

        public NotificationsController(
            INotificationService notificationService,
            ILogger<NotificationsController> logger)
        {
            _notificationService = notificationService;
            _logger = logger;
        }

        // ============================================================
        // ๐ฌ ุฌูุจ ุฌููุน ุฅุดุนุงุฑุงุช ุงููุณุชุฎุฏู (ูุน ุฏุนู role=owner)
        // ============================================================
        [HttpGet("{role}/{userId:int}")]
        public async Task<IActionResult> GetByUser(string role, int userId, [FromQuery] bool all = false)
        {
            try
            {
                var normalizedRole = role.ToLower();

                // ๐ ุงููุงูู ูุดุงูุฏ ุฌููุน ุงูุฅุดุนุงุฑุงุช (ุจุฏูู ููุชุฑุฉ userId/role)
                var notifications = normalizedRole == "owner" || all
                    ? await _notificationService.GetByUserAsync(0, "owner")
                    : await _notificationService.GetByUserAsync(userId, normalizedRole);

                if (!notifications.Any())
                    return Ok(new
                    {
                        message = "โน๏ธ ูุง ุชูุฌุฏ ุฅุดุนุงุฑุงุช ุญุงููุงู.",
                        count = 0,
                        data = Array.Empty<object>()
                    });

                return Ok(new
                {
                    message = $"โ ุชู ุฌูุจ {notifications.Count()} ุฅุดุนุงุฑุงู ุจูุฌุงุญ.",
                    count = notifications.Count(),
                    data = notifications
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "โ ุฎุทุฃ ุฃุซูุงุก ุฌูุจ ุงูุฅุดุนุงุฑุงุช ูููุณุชุฎุฏู {UserId}", userId);
                return StatusCode(500, new
                {
                    message = "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฌูุจ ุงูุฅุดุนุงุฑุงุช.",
                    details = ex.Message
                });
            }
        }

        // ============================================================
        // ๐ ุฌูุจ ุงูุฅุดุนุงุฑุงุช ุบูุฑ ุงูููุฑูุกุฉ ููุท (ูุน ุฏุนู owner)
        // ============================================================
        [HttpGet("{role}/{userId:int}/unread")]
        public async Task<IActionResult> GetUnread(string role, int userId, [FromQuery] bool all = false)
        {
            try
            {
                var normalizedRole = role.ToLower();

                // ๐ ุงููุงูู ูุดุงูุฏ ุฌููุน ุงูุฅุดุนุงุฑุงุช ุบูุฑ ุงูููุฑูุกุฉ ูู ุงููุธุงู
                var notifications = normalizedRole == "owner" || all
                    ? await _notificationService.GetUnreadAsync(0, "owner")
                    : await _notificationService.GetUnreadAsync(userId, normalizedRole);

                if (!notifications.Any())
                    return Ok(new
                    {
                        message = "๐ญ ูุง ุชูุฌุฏ ุฅุดุนุงุฑุงุช ุบูุฑ ููุฑูุกุฉ ุญุงููุงู.",
                        count = 0,
                        data = Array.Empty<object>()
                    });

                return Ok(new
                {
                    message = $"๐ซ ุชู ุฌูุจ {notifications.Count()} ุฅุดุนุงุฑุงู ุบูุฑ ููุฑูุก.",
                    count = notifications.Count(),
                    data = notifications
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "โ ุฎุทุฃ ุฃุซูุงุก ุฌูุจ ุงูุฅุดุนุงุฑุงุช ุบูุฑ ุงูููุฑูุกุฉ ูููุณุชุฎุฏู {UserId}", userId);
                return StatusCode(500, new
                {
                    message = "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฌูุจ ุงูุฅุดุนุงุฑุงุช ุบูุฑ ุงูููุฑูุกุฉ.",
                    details = ex.Message
                });
            }
        }

        // ============================================================
        // โ ุชุญุฏูุฏ ุฅุดุนุงุฑ ูููุฑูุก
        // ============================================================
        [HttpPut("{id:int}/read")]
        public async Task<IActionResult> MarkAsRead(int id)
        {
            try
            {
                await _notificationService.MarkAsReadAsync(id);
                return Ok(new { message = $"โ ุชู ุชุญุฏูุฏ ุงูุฅุดุนุงุฑ ({id}) ูููุฑูุก." });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "โ ูุดู ูู ุชุญุฏูุฏ ุงูุฅุดุนุงุฑ ูููุฑูุก {Id}", id);
                return StatusCode(500, new
                {
                    message = "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญุฏูุฏ ุงูุฅุดุนุงุฑ ูููุฑูุก.",
                    details = ex.Message
                });
            }
        }

        // ============================================================
        // ๐๏ธ ุญุฐู ุฅุดุนุงุฑ
        // ============================================================
        [HttpDelete("{id:int}")]
        public async Task<IActionResult> Delete(int id)
        {
            try
            {
                await _notificationService.DeleteAsync(id);
                return Ok(new { message = $"๐๏ธ ุชู ุญุฐู ุงูุฅุดุนุงุฑ ุฑูู {id}." });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "โ ูุดู ูู ุญุฐู ุงูุฅุดุนุงุฑ {Id}", id);
                return StatusCode(500, new
                {
                    message = "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุญุฐู ุงูุฅุดุนุงุฑ.",
                    details = ex.Message
                });
            }
        }

        // ============================================================
        // โ ุฅูุดุงุก ุฅุดุนุงุฑ ูุฏูู (ุงุฎุชูุงุฑู - ููุงุฎุชุจุงุฑ ุฃู ุงููุดุฑููู)
        // ============================================================
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] NotificationDto dto)
        {
            try
            {
                await _notificationService.CreateAsync(dto);
                return Ok(new
                {
                    message = "โ ุชู ุฅูุดุงุก ุงูุฅุดุนุงุฑ ุจูุฌุงุญ.",
                    data = dto
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "โ ูุดู ูู ุฅูุดุงุก ุฅุดุนุงุฑ ุฌุฏูุฏ");
                return StatusCode(500, new
                {
                    message = "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุงูุฅุดุนุงุฑ.",
                    details = ex.Message
                });
            }
        }

        // ============================================================
        // โ ุฅูุดุงุก ุฅุดุนุงุฑุงุช ุฌูุงุนูุฉ (ูุซูุงู ุนูุฏ ุฅุดุนุงุฑ ุนุฏุฉ ููุฏูุจูู ุฏูุนุฉ ูุงุญุฏุฉ)
        // ============================================================
        [HttpPost("bulk")]
        public async Task<IActionResult> CreateMany([FromBody] IEnumerable<NotificationDto> dtos)
        {
            try
            {
                await _notificationService.CreateManyAsync(dtos);
                return Ok(new
                {
                    message = $"โ ุชู ุฅูุดุงุก {dtos.Count()} ุฅุดุนุงุฑุงู ุฌูุงุนูุงู ุจูุฌุงุญ.",
                    count = dtos.Count()
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "โ ูุดู ูู ุฅูุดุงุก ุฅุดุนุงุฑุงุช ุฌูุงุนูุฉ");
                return StatusCode(500, new
                {
                    message = "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุฅุดุนุงุฑุงุช ุฌูุงุนูุฉ.",
                    details = ex.Message
                });
            }
        }
    }
}
